// modules/contexts/tikvideo.js
const { ContextMenuCommandBuilder, EmbedBuilder, AttachmentBuilder } = require("discord.js");
const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

const cacheDir = path.join(__dirname, "cache");

module.exports = {
  data: new ContextMenuCommandBuilder()
    .setName("Tiktok Video")
    .setType(3), // 3 = Message context menu

  async execute(interaction) {
    const targetContent = interaction.targetMessage.content;

    // Regex ƒë·ªÉ l·∫•y URL TikTok
    const regex = /https?:\/\/(?:www\.)?tiktok\.com\/@([a-zA-Z0-9._-]+)\/video\/(\d+)/;
    const match = targetContent.match(regex);

    if (!match) {
      await interaction.reply({
        content: "‚ùå Li√™n k·∫øt kh√¥ng h·ª£p l·ªá, vui l√≤ng th·ª≠ l·∫°i.",
        ephemeral: true,
      });
      return;
    }

    // T·∫°o th∆∞ m·ª•c cache n·∫øu ch∆∞a c√≥
    if (!fs.existsSync(cacheDir)) {
      fs.mkdirSync(cacheDir, { recursive: true });
    }

    await interaction.reply({
      content: `üì• ƒêang t·∫£i video...`,
      ephemeral: false,
    });

    try {
      const res = await axios.get(
        `https://www.tikwm.com/api/?url=${encodeURIComponent(targetContent)}`
      );
      const data = res.data.data;

      if (!data || !data.play) {
        throw new Error("Kh√¥ng t√¨m th·∫•y link video t·ª´ API");
      }

      const videoPath = path.join(cacheDir, `tiktok-${Date.now()}.mp4`);

      // T·∫£i video stream v·ªÅ file
      const videoStream = await axios.get(data.play, { responseType: "stream" });
      const writer = fs.createWriteStream(videoPath);
      videoStream.data.pipe(writer);

      // ƒê·ª£i video ghi xong ho·∫∑c l·ªói
      await new Promise((resolve, reject) => {
        writer.on("finish", resolve);
        writer.on("error", reject);
      });

      // T·∫°o Embed th√¥ng tin video
      const embed = new EmbedBuilder()
        .setTitle(data.title || "Video TikTok")
        .setURL(targetContent)
        .setDescription(`üë§ ${data.author.nickname} (@${data.author.unique_id})`)
        .addFields(
          { name: "‚ù§Ô∏è L∆∞·ª£t tim", value: data.digg_count.toLocaleString(), inline: true },
          { name: "üí¨ B√¨nh lu·∫≠n", value: data.comment_count.toLocaleString(), inline: true },
          { name: "üîÅ Chia s·∫ª", value: data.share_count.toLocaleString(), inline: true },
          { name: "‚¨áÔ∏è T·∫£i xu·ªëng", value: data.download_count.toLocaleString(), inline: true },
          { name: "‚è± Th·ªùi l∆∞·ª£ng", value: `${data.duration}s`, inline: true }
        )
        .setThumbnail(data.origin_cover)
        .setColor(0xff0050);

      const attachment = new AttachmentBuilder(videoPath);
      await interaction.editReply({
        content: null,
        embeds: [embed],
        files: [attachment],
        ephemeral: false,
      });

      fs.unlinkSync(videoPath);
    } catch (err) {
      console.error("L·ªói khi x·ª≠ l√Ω video TikTok:", err);
      await interaction.editReply({
        content: "‚ùå Kh√¥ng th·ªÉ t·∫£i video. C√≥ th·ªÉ link l·ªói ho·∫∑c API qu√° t·∫£i.",
        ephemeral: false,
      });
    }
  },
};
